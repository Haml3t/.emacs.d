					;http://www.emacswiki.org/emacs/EmacsNiftyTricks

					;C-x r t STRING <ret> for fill rect w string
;C-x (
;macro
;C-x )
;Use 0 as argument to call-last-kbd-macro C-x e to execute the macro until an error occurs (e.g. because a search failed or the end of buffer has been reached ), i.e. C-u 0 C-x e.
;Alternatively, select a region, then use apply-macro-to-region-lines, which is bound to C-x C-k r. From the docstring: Apply last keyboard macro to all lines in the region. For each line that begins in the region, move to the beginning of the line, and run the last keyboard macro.

;(execute-kbd-macro (symbol-function 'foo)) ;to run a macro lisp-like
; (global-set-key '[(f1)] 'call-last-kbd-macro) ;for example


;; smex org-checklist org-mime

(setq debug-on-error t)

(add-to-list 'load-path (concat (getenv "HOME") "/org/"))
					; (load "org-mode")
(package-initialize)
;; load org elpa
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
;; load taskjuggler export
(require 'ox-taskjuggler)
;; load org-depend
(require 'org-depend)
;; keybindings
(setq lisp-directory (getenv "LISP"))
(setq hostname (getenv "HOSTNAME"))
(setq org-env-dir (getenv "ORG"))
(global-set-key (kbd "M-z") 'zap-up-to-char)

(column-number-mode)

(global-visual-line-mode t)

(if (file-exists-p abbrev-file-name) (quietly-read-abbrev-file))

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; set font
(add-to-list 'default-frame-alist
	     '(font . "DejaVu Sans Mono-10"))

(setq save-interprogram-paste-before-kill t) ;pretty much what it says on the box
;; TRAMP
(setq tramp-default-method "ssh")
;(setq ring-bell-function 'ignore)
(fset 'yes-or-no-p 'y-or-n-p)
(show-paren-mode t)
(setq-default show-trailing-whitespace t)
(setq backup-directory-alist '(("." . "~/.saves")))
(windmove-default-keybindings 'meta)

(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))

(global-set-key (kbd "<C-tab>") 'switch-window)
(global-set-key (kbd "C-x k") 'kill-this-buffer)

(global-hl-line-mode 1)
(remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

(defun save-macro (name)
  "save a macro. Take a name as argument
     and save the last defined macro under
     this name at the end of your .emacs"
  (interactive "Name of the macro :")  ; ask for the name of the macro
  (kmacro-name-last-macro name)         ; use this name for the macro
  (find-file user-init-file)            ; open ~/.emacs or other user init file
  (goto-char (point-max))               ; go to the end of the .emacs
  (newline)                             ; insert a newline
  (insert-kbd-macro name)               ; copy the macro
  (newline)                             ; insert a newline
  (switch-to-buffer nil))               ; return to the initial buffer


(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

(require 'auto-complete)

(ac-config-default)

(require 'yasnippet)
(yas-global-mode 1)

;; compile & run c
(defun compile-and-run-c ()
  (interactive)
  (let ((this_buffer (buffer-name)))
    (with-current-buffer (eval this_buffer) (save-buffer))
    (shell-command
     (concat "gcc /cygdrive/h/Dropbox/home/Haml3t/code/c/" (eval this_buffer) " -o /cygdrive/h/Dropbox/home/Haml3t/code/c/" (substring (eval this_buffer) 0 -2) ".exe && /cygdrive/h/Dropbox/home/Haml3t/code/c/"(substring (eval this_buffer) 0 -2) ".exe"))))

(add-hook 'c-mode-hook (lambda () (local-set-key (kbd "M-c") 'compile-and-run-c)))


(require 'autopair)
(autopair-global-mode)

(require 'visual-regexp)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
(define-key global-map (kbd "C-c m") 'vr/mc-mark)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(defun org-taskjuggler-export-process-open ()
  (interactive)
  (org-taskjuggler-export)
  (shell-command
   (concat
    (concat "tj3 "
	    (substring (buffer-file-name) 0 -4))
    (concat ".tjp; firefox Plan.html"))))

;;(global-set-key (kbd "C-S-j") (switch-to-buffer "*-jabber-chat-Jane Cotler-*")
(defun compile-and-run-haskell ()
  "Compile and execute a .hs haskell file, as long as no reading from stdin is req'd"
  (interactive)
  (shell-command
   (concat
     (concat "ghc -v0 -O2 --make " ; -dynamic for dynamic linking
	     (substring (buffer-file-name) 0 -3))
     (concat "; " (substring (buffer-file-name) 0 -3)))))
;also, cabal install <lib> --enable-shared --reinstall
;; flyspell

;; auto-compile TeX with pdflatex on write
(add-hook 'latex-mode-hook (lambda () (add-hook 'after-save-hook (message "laser") nil 'make-it-local)))

(latex-preview-pane-enable)

(setq align-rules-list '())

(global-linum-mode t)

(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
(define-key global-map (kbd "M-j")	'ace-jump-mode)
(add-hook 'matlab-mode-hook (lambda () (local-set-key (kbd "M-j") 'ace-jump-mode)))
(define-key global-map (kbd "M-a")	'align-regexp)


;;encrypted email?
;;(require 'epa-file)
;;(epa-file-enable)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
;; disable menu bar, scroll bar
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; zap-to-char
(defun zap-up-to-char (arg char)
 "Kill up to, but not including ARGth occurrence of CHAR.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
Ignores CHAR at point."
 (interactive "Zap up to char: ")
 (let ((direction (if (>= arg 0) 1 -1)))
   (kill-region (point)
		(progn
		  (forward-char direction)
		  (unwind-protect
		      (search-forward (char-to-string char) nil nil arg)
		    (backward-char direction))
		  (point)))))
;; ido
;; (setq ido-enable-flex-matching t)
;; (setq ido-everywhere t)
;; (ido-mode 1)				;when creating new file, disable with c-f
;; (setq ido-file-extensions-order '(".org" ".txt" ".tex" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))

;; helm

(require 'helm-config)
(require 'helm)
(setq helm-autoresize-max-height 30)
(helm-autoresize-mode 1)
(ido-mode -1)
(helm-mode 1)
(setq helm-mode-fuzzy-match t)
(setq	helm-semantic-fuzzy-match t)
(setq	helm-semantic-imenu-match t)
(setq	helm-completion-in-region-fuzzy-match t)
(setq	helm-split-window-in-side-p nil)
(setq	helm-ff-file-name-history-use-recentf t)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "M-.") 'helm-semantic-or-imenu)

;; jabber
(add-to-list 'load-path lisp-directory)
(load "jabber_config.el")

;; that wizard's org config
;; (load "org-mode.el")
;; v1.0 org config (my first custom agendas, capture broken)
(load "org3.el")

;; org-mode
;; ical export stuff
(setq org-icalendar-combined-agenda-file "/home/haml3t/org.ics"
      org-icalendar-timezone "America/New_York"
      org-agenda-default-appointment-duration 30 ;; minutes
      org-icalendar-alarm-time 10 ;; minutes
      org-icalendar-include-todo nil;; t ;; make TODO events for non-done todos (?)
      org-icalendar-use-deadline '(event-if-todo todo-due)
      org-icalendar-use-scheduled '(event-if-todo))

(defun gtd-export-agendas-and-calendar ()
  "Export scheduled tasks or those with set deadlines (that aren't \"DONE\") to an iCalendar file too."
  (interactive)
;  (gtd-mark-completed-exported-tasks-as-done)
  (org-store-agenda-views)
  ;; Iterate through every headline in the agenda files, looking for not-DONE tasks that
  ;; are scheduled or have deadlines, storing their starting character position if found.
  (let ((calendar-hash (make-hash-table :test 'equal))
	(calendar-items nil))
    (org-map-entries (lambda ()
		       (let ((scheduledp (org-get-scheduled-time (point) nil))
			     (deadlinep (org-get-deadline-time (point) nil))
			     (notdonep (not (equal "DONE" (org-get-todo-state))))
			     (filename (org-entry-get (point) "FILE")))
			 (when (and (or scheduledp
					deadlinep)
				    notdonep)
			   (puthash filename (cons (point) (gethash filename calendar-hash)) calendar-hash))))
		     nil 'agenda)
    ;; Turn the hash into an alist
    (maphash (lambda (key value)
	       (add-to-list 'calendar-items (cons key value)))
	     calendar-hash)
    ;; Build iCalendar export file, restricting the items to only those just
    ;; found. `calendar-items' is an alist where key is a file name and value a list of
    ;; buffer positions pointing to entries that should appear in the calendar.
    (apply 'org-icalendar--combine-files calendar-items (org-agenda-files t)))
  (org-save-all-org-buffers))

(defun export-org-agenda-to-gcal-local ()
  (interactive)
  (if (boundp 'org-agenda-default-appointment-duration)
      (progn
	(org-save-all-org-buffers)
	(gtd-export-agendas-and-calendar)
       (message (shell-command-to-string "sleep 1; mv /home/haml3t/org.ics /home/haml3t/org/org.ics")))
    (message "you must run org-agenda before using this function")))
(add-hook 'org-capture-mode-hook
	  (lambda ()
	    (set (make-local-variable
		  'org-complete-tags-always-offer-all-agenda-tags)
		 t)))

(setq org-agenda-sticky t)		;set org agendas so they persist

;; end of org stuff
(defun xah-copy-file-path (&optional φdir-path-only-p)
  "Copy the current buffer's file path or dired path to `kill-ring'.
If `universal-argument' is called, copy only the dir path.
Version 2015-01-14
URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'"
  (interactive "P")
  (let ((fPath
	 (if (equal major-mode 'dired-mode)
	     default-directory
	   (buffer-file-name))))
    (kill-new
     (if (equal φdir-path-only-p nil)
	 fPath
       (file-name-directory fPath)))
    (message "File path copied: 「%s」" fPath)))

;; (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
;;  (add-to-list
;;   'auto-mode-alist
;;   '("\\.m$" . matlab-mode))

(server-start)
(setq server-name "emacs-server")

;; org-protocol
;; (add-to-list 'load-path "~/")
					; (org-agenda)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (lush)))
 '(custom-safe-themes
   (quote
    ("0820d191ae80dcadc1802b3499f84c07a09803f2cb90b343678bdb03d225b26b" "1ba463f6ac329a56b38ae6ac8ca67c8684c060e9a6ba05584c90c4bffc8046c3" default)))
 '(debug-on-error t)
 '(jabber-chat-buffer-show-avatar nil)
 '(jabber-roster-line-format "%c %-25n %u %-8s  %S")
 '(nil nil t)
 '(org-agenda-custom-commands
   (quote
    (("N" "Notes" tags "NOTE"
      ((org-agenda-overriding-header "Notes")
       (org-tags-match-list-sublevels t)))
     ("h" "Habits" agenda ""
      ((org-agenda-span 1)
       (org-agenda-tag-filter-preset
	(quote
	 ("+HABIT")))
       (org-agenda-overriding-header "Habits")))
     (" " "Agenda"
      ((agenda ""
	       ((org-agenda-overriding-header "DISCIPLINE: 7-5 HARMONY: 5-10")))
       (tags "REFILE"
	     ((org-agenda-overriding-header "Tasks to Refile")
	      (org-tags-match-list-sublevels nil)))
       (tags-todo "-CANCELLED/!"
		  ((org-agenda-overriding-header "Stuck Projects")
		   (org-agenda-skip-function
		    (quote bh/skip-non-stuck-projects))
		   (org-agenda-sorting-strategy
		    (quote
		     (category-keep)))))
       (tags-todo "-HOLD-CANCELLED/!"
		  ((org-agenda-overriding-header "Projects")
		   (org-agenda-skip-function
		    (quote bh/skip-non-projects))
		   (org-tags-match-list-sublevels
		    (quote indented))
		   (org-agenda-sorting-strategy
		    (quote
		     (category-keep)))))
       (tags-todo "-CANCELLED/!NEXT"
		  ((org-agenda-overriding-header
		    (concat "Project Next Tasks"
			    (if bh/hide-scheduled-and-waiting-next-tasks "" " (including WAITING and SCHEDULED tasks)")))
		   (org-agenda-skip-function
		    (quote bh/skip-projects-and-habits-and-single-tasks))
		   (org-tags-match-list-sublevels t)
		   (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-sorting-strategy
		    (quote
		     (todo-state-down effort-up category-keep)))))
       (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
		  ((org-agenda-overriding-header
		    (concat "Project Subtasks"
			    (if bh/hide-scheduled-and-waiting-next-tasks "" " (including WAITING and SCHEDULED tasks)")))
		   (org-agenda-skip-function
		    (quote bh/skip-non-project-tasks))
		   (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-sorting-strategy
		    (quote
		     (category-keep)))))
       (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
		  ((org-agenda-overriding-header
		    (concat "Standalone Tasks"
			    (if bh/hide-scheduled-and-waiting-next-tasks "" " (including WAITING and SCHEDULED tasks)")))
		   (org-agenda-skip-function
		    (quote bh/skip-project-tasks))
		   (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-sorting-strategy
		    (quote
		     (category-keep)))))
       (tags-todo "-CANCELLED+WAITING|HOLD/!"
		  ((org-agenda-overriding-header
		    (concat "Waiting and Postponed Tasks"
			    (if bh/hide-scheduled-and-waiting-next-tasks "" " (including WAITING and SCHEDULED tasks)")))
		   (org-agenda-skip-function
		    (quote bh/skip-non-tasks))
		   (org-tags-match-list-sublevels nil)
		   (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
		   (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
       (tags "-REFILE/"
	     ((org-agenda-overriding-header "Tasks to Archive")
	      (org-agenda-skip-function
	       (quote bh/skip-non-archivable-tasks))
	      (org-tags-match-list-sublevels nil))))
      nil)
     ("p" "Process" tags "+REFILE" nil))))
 '(org-agenda-skip-scheduled-if-done t)
 '(org-complete-tags-always-offer-all-agenda-tags t)
 '(org-export-backends (quote (ascii html icalendar latex taskjuggler)))
 '(org-habit-graph-column 100)
 '(org-tags-exclude-from-inheritance (quote ("PROJECT_ROOT" "SUBPROJECT_ROOT" "title")))
 '(org-taskjuggler-default-global-properties
   "shift s40 \"Part time shift\" {
  workinghours wed, thu, fri off
}
flags tier1, note
")
 '(org-taskjuggler-default-reports
   (quote
    ("textreport report \"Plan\" {
  formats html
  header '== %title =='

  center -8<-
    [#Plan Plan] | [#Resource_Allocation Resource Allocation]
    ----
    === Plan ===
    <[report id=\"plan\"]>
    ----
    === Resource Allocation ===
    <[report id=\"resourceGraph\"]>
  ->8-
}

# A traditional Gantt chart with a project overview.
taskreport plan \"\" {
  headline \"Project Plan\"
  columns bsi, name, start, end, effort, chart
  rolluptask test, note
  hidetask note
  loadunit shortauto
  hideresource 1
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph \"\" {
  headline \"Resource Allocation Graph\"
  columns no, name, effort, weekly
  loadunit shortauto
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}")))
 '(org-use-property-inheritance t)
 '(send-mail-function (quote smtpmail-send-it)))

(require 'edit-server)
(edit-server-start)

(defun save-and-compile-latex ()
  (interactive)
  (save-buffer)
  (shell-command
   (concat "pdflatex \"" (buffer-file-name) "\"")))

(add-hook 'LaTeX-mode-hook
	  (lambda () (local-set-key (kbd "M-c") 'save-and-compile-latex)))

(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "lynx")
;; bbdb and gnus
(load "~/.emacs.d/gnus-conf.el")
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(rainbow-delimiters-depth-1-face ((t (:foreground "white"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "red"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "dark magenta"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "yellow"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "green"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "cyan"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "chocolate")))))
